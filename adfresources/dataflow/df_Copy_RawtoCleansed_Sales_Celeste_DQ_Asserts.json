{
	"name": "df_Copy_RawtoCleansed_Sales_Celeste_DQ_Asserts",
	"properties": {
		"folder": {
			"name": "05-Exercise"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "abs_csv_raw_Celeste_DQ_Asserts",
						"type": "DatasetReference"
					},
					"name": "SourceCSVCeleste"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_adlsvinoworld_dev",
						"type": "LinkedServiceReference"
					},
					"name": "sinkCSVCleansedCeleste"
				},
				{
					"linkedService": {
						"referenceName": "ls_adlsvinoworld_dev",
						"type": "LinkedServiceReference"
					},
					"name": "sinkErrorLog"
				}
			],
			"transformations": [
				{
					"name": "RemoveZeroValues",
					"flowlet": {
						"referenceName": "fl_RemoveZeroValues",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "filterSummaryLine"
				},
				{
					"name": "addFileNameColumn"
				},
				{
					"name": "AggregateDailySales"
				},
				{
					"name": "checkSalesRegion"
				},
				{
					"name": "AddErrorRow"
				},
				{
					"name": "splitCleanandErrorRows"
				},
				{
					"name": "addErrorFileName"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DF_FileName as string (\"Celeste_2022-09\")",
				"}",
				"source(output(",
				"          TransactionId as string,",
				"          TransactionDate as string,",
				"          OnlineRetailer as string,",
				"          SalesMonth as string,",
				"          SalesRegion as string,",
				"          SalesCurrency as string,",
				"          Title as string,",
				"          Vintage as string,",
				"          Variety as string,",
				"          Score as string,",
				"          ListPrice as string,",
				"          Quantity as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceCSVCeleste",
				"AggregateDailySales compose(mapColumn(",
				"          OnlineRetailer,",
				"          SalesMonth,",
				"          SalesRegion,",
				"          SalesCurrency,",
				"          Title,",
				"          Vintage,",
				"          Variety,",
				"          Score,",
				"          ListPrice,",
				"          FileName,",
				"          Quantity",
				"     ),",
				"     composition: 'fl_RemoveZeroValues') ~> RemoveZeroValues@(outputCSVCleansedCeleste)",
				"addFileNameColumn filter(left(Title, 21) != 'Total Sales Quantity:') ~> filterSummaryLine",
				"SourceCSVCeleste derive(FileName = concat(OnlineRetailer, '_', substring(SalesMonth, 1, 4), '_', substring(SalesMonth, 6, 2))) ~> addFileNameColumn",
				"filterSummaryLine aggregate(groupBy(OnlineRetailer,",
				"          SalesMonth,",
				"          SalesRegion,",
				"          SalesCurrency,",
				"          Title,",
				"          Vintage,",
				"          Variety,",
				"          Score,",
				"          ListPrice,",
				"          FileName),",
				"     Quantity = sum(toInteger(Quantity))) ~> AggregateDailySales",
				"RemoveZeroValues@outputCSVCleansedCeleste assert(expectTrue(or (SalesRegion == \"EU\", SalesRegion == \"UK\"), false, 'assertSalesRegion', null, \"Sales region not EU or UK\")) ~> checkSalesRegion",
				"checkSalesRegion derive(IsErrorRow = isError(),",
				"          hasErrorRow = hasError('assertSalesRegion')) ~> AddErrorRow",
				"AddErrorRow split(IsErrorRow == false(),",
				"     disjoint: false) ~> splitCleanandErrorRows@(CleanRows, ErrorRows)",
				"splitCleanandErrorRows@ErrorRows derive(ErrorFileName = concat(\"Error_\", FileName)) ~> addErrorFileName",
				"splitCleanandErrorRows@CleanRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'cleansed',",
				"     folderPath: 'test',",
				"     truncate: true,",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     rowFolderUrlColumn:'\\'test\\'',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     ignoreAssertFailedRows: true) ~> sinkCSVCleansedCeleste",
				"addErrorFileName sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'cleansed',",
				"     folderPath: 'test',",
				"     truncate: true,",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:[(concat('Error_', $DF_FileName))],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkErrorLog"
			]
		}
	}
}